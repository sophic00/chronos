name: Deploy to Production Server

on:
  push:
    branches:
      - prod  # Trigger this workflow on pushes to the 'prod' branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Setup TailScale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Configure SSH known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" | base64 -d > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Run Deployment Script
        run: |
          ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'bash -s' << 'EOF'
            set -e

            # --- Configuration ---
            PROJECT_DIR="~/chronos"
            CONTAINER_NAME="chronos"
            GIT_REPO_URL="https://github.com/sophic00/chronos.git"

            echo "--- Starting deployment ---"

            # --- Git Operations: Clone or Update ---
            if [ -d "$PROJECT_DIR" ]; then
                echo "--- Project directory found. Fetching latest code... ---"
                cd "$PROJECT_DIR"
                git fetch origin
                echo "--- Resetting prod branch to match remote ---"
                git checkout prod
                git reset --hard origin/prod
            else
                echo "--- Project directory not found. Cloning repository... ---"
                git clone "$GIT_REPO_URL" "$PROJECT_DIR"
                cd "$PROJECT_DIR"
                git checkout prod
            fi

            echo "--- In project directory: $(pwd) ---"

            # --- Docker Operations ---
            echo "--- Stopping and removing old container ---"
            docker stop "$CONTAINER_NAME" || true
            docker rm "$CONTAINER_NAME" || true

            echo "--- Building new Docker image ---"
            docker build -t "$CONTAINER_NAME" .
            
            mkdir -p data
            sed -e "s/'//g" -e 's/"//g' -e 's/[[:space:]]*#.*$//' .env > .env.docker

            echo "--- Starting new container ---"
            docker run -d \
                --restart always \
                --name "$CONTAINER_NAME" \
                --env-file .env.docker \
                -v "$(pwd)/data:/app/data" \
                "$CONTAINER_NAME"

            # --- Cleanup ---
            rm .env.docker
            echo "--- Pruning old Docker images ---"
            docker image prune -f

            echo "--- Deployment finished successfully! ---"
          EOF
